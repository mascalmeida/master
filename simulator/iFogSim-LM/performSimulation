#!/bin/bash

input_file_path=''
output_files_path=''
delay_graph_path=''
modules_graph_path=''
will_create_delay_graph=''
will_create_modules_graph=''
strategies=''
strategies_array=()
replications=''

display_usage() {
  echo
  echo "Usage: $0"
  echo
  echo " -i, Path for input file with multiple lines of test parameters. The strategy parameter should not be present. E.g.: 4000, 1, 3, 0, 5, 4, 1, 0, 6"
  echo " -o, Directory where output files with test results will be saved. One file for each informed strategy will be created. E.g.: strategy_1 strategy_2"
  echo " -s, Array of strategies with which the tests cases will be executed. Possible values: 1, 2, 3"
  echo " -d, Generates a delay graph in the specified path (Optional)"
  echo " -m, Generates a number of modules per device graph in the specified path (Optional)"
  echo " -r, Number of replications"
  echo
  echo " Exemple of usage: ./performSimulation -i input_test -o output_files_dir -s \"1,2\" "
  echo
}

#/performSimulation -i input  -o outputFolder -s  "1,2,3,6,7"
#     python3.7 ../outputProcessor.py "1,2,3,6,7"

print_error() {
  local error_message="$@"
  echo "${error_message}" 1>&2;
}

check_strategies() {
  IFS=',' read -r -a strategies_array <<< "$strategies"
  for strategy in "${strategies_array[@]}"
  do
    if [ -z $strategy ] ; then
      print_error "Empty strategy passed"
      display_usage
      exit 1
    fi

    if [ $strategy != "1" ] && [ $strategy != "2" ] && [ $strategy != "3" ] && [ $strategy != "4" ] && [ $strategy != "6" ] && [ $strategy != "7" ]; then
      print_error "Wrong strategy value $strategy"
      display_usage
      exit 1
    fi
  done
}

check_arguments() {
  if [ -z $input_file_path ] ; then
    print_error "Expected argument tests input file to be present"
    display_usage
    exit 1
  fi
  if [ -z $output_files_path ] ; then
    print_error "Expected argument output files path to be present"
    display_usage
    exit 1
  fi
  if [ -z $strategies ] ; then
    print_error "Expected argument strategies to be present and not be empty"
    display_usage
    exit 1
  fi
  check_strategies
}

execute_tests_from_input_file() {
  i=0
  for strategy in "${strategies_array[@]}"
  do
     > ${output_files_path}/strategy_${strategy_1}
     CONTADOR=0
     while [  $CONTADOR -lt $replications ]; do
         echo "" > ${output_files_path}/strategy_${strategy}_${CONTADOR}
         let CONTADOR=CONTADOR+1;
     done
  done
  CONTADOR=0
  while [  $CONTADOR -lt $replications ]; do
      while IFS='' read -r line || [[ -n "$line" ]]; do
        i=$((i+1))
        for strategy in "${strategies_array[@]}"
        do
          IFS=', ' read -r -a array <<< "$line"
          echo "Execution $strategy_${strategy}_${CONTADOR}"
          echo "*************************" >> ${output_files_path}/strategy_${strategy}_${CONTADOR}
          echo "Execution $i" >> ${output_files_path}/strategy_${strategy}_${CONTADOR}
          array+=($strategy)
          echo "input = ${array[@]}" >> ${output_files_path}/strategy_${strategy}_${CONTADOR}
          java -classpath ./fogSimulator/jars/json-simple-1.1.1.jar:./fogSimulator/jars/commons-math3-3.5/commons-math3-3.5.jar:./fogSimulator/src:./bin org.fog.test.perfeval.Position3 ${array[@]} >> ${output_files_path}/strategy_${strategy}_${CONTADOR} &
        done
        # sleep 1 second
        # sleep 1
        wait
      done < "$input_file_path"
    let CONTADOR=CONTADOR+1;
  done

  for strategy_1 in "${strategies_array[@]}"
  do
     CONTADOR=0
     while [  $CONTADOR -lt $replications ]; do
         cat ${output_files_path}/strategy_${strategy_1}_${CONTADOR} >> ${output_files_path}/strategy_${strategy_1}
         let CONTADOR=CONTADOR+1;
     done
  done
}

call_script_to_create_graphs() {
  if [ "$will_create_delay_graph" == "true" ] ; then
   if ! [ -z "$delay_graph_path" ] ; then
      echo "Will call script to create delay graph here"
    else
      print_error "Expected argument delay graph output path to be present"
      display_usage
    fi
  fi
  if [ "$will_create_modules_graph" == "true" ] ; then
    if ! [ -z "$delay_modules_path" ] ; then
      echo "Will call script to create modules graph here"
    else
      print_error "Expected argument modules graph output path to be present"
      display_usage
    fi
  fi
}

while getopts 'i:o:d:m:s:r:' flag; do
  case "${flag}" in
    i) input_file_path="${OPTARG}" ;;
    o) output_files_path="${OPTARG}" ;;
    d) delay_graph_path="${OPTARG}"
       will_create_delay_graph="true";;
    m) modules_graph_path="${OPTARG}"
       will_create_modules_graph="true";;
    s) strategies="${OPTARG}" ;;
    r) replications="${OPTARG}" ;;
    *) display_usage 
       exit 1 ;;
  esac
done

check_arguments
execute_tests_from_input_file
call_script_to_create_graphs
